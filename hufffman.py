#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Nov 28 18:59:00 2018

@author: talles
"""

#Transformar a imagem TODA em um vetor e fazer os binarios de cada numero em 8 bits
#Contar as ocorrencias de cada nivel de cor
#Criar a arvore de recorrencias
import cv2 as cv
import numpy as np
import queue

def huffman(img):
    img_vetor = []
    histograma = np.arange(256, dtype=int)
    for i in range(img.shape[0]):
        for j in range(img.shape[1]):
            for k in range(img.shape[2]):
                subpixel = img[i][j][k]
                histograma[subpixel] += 1
                img_vetor.append(format(subpixel, '08b'))
    class HuffmanNode:
        def __init__(self, left=None,right=None, root=None):
            self.left = left
            self.right = right
            self.root =root
        def children(self):
            return(self.left, self.right)
        def __lt__(self,other):
            return 0
        def preorder(self, path=None):
            if(path is None):
                path = []
            if (self.left is not None):
                if(isinstance(self.left[1],HuffmanNode)):
                    self.left[1].preorder(path+[0])
                else:
                    print(self.left,path+[0])
            if (self.right is not None):
                if (isinstance(self.right[1], HuffmanNode)):
                    self.right[1].preorder(path+[1])
                else:
                    print(self.right, path[1])
    freq = []
    for i in range(256):
        freq.append((histograma[i], format(i, '08b')))
#    
#    print(freq)
    freq = [(32, '00000000'), (8, '00000001'), (9, '00000010'), (13, '00000011'), (16, '00000100'), (16, '00000101'), (23, '00000110'), (38, '00000111'), (36, '00001000'), (52, '00001001'), (76, '00001010'), (72, '00001011'), (114, '00001100'), (104, '00001101'), (141, '00001110'), (163, '00001111'), (216, '00010000'), (285, '00010001'), (346, '00010010'), (442, '00010011'), (581, '00010100'), (761, '00010101'), (960, '00010110'), (1362, '00010111'), (1868, '00011000'), (2490, '00011001'), (3528, '00011010'), (4722, '00011011'), (6707, '00011100'), (8454, '00011101'), (10020, '00011110'), (11004, '00011111'), (10997, '00100000'), (10177, '00100001'), (9473, '00100010'), (8835, '00100011'), (8042, '00100100'), (7710, '00100101'), (7539, '00100110'), (7493, '00100111'), (7352, '00101000'), (7273, '00101001'), (7332, '00101010'), (7362, '00101011'), (7433, '00101100'), (7488, '00101101'), (7545, '00101110'), (7802, '00101111'), (7902, '00110000'), (8229, '00110001'), (8403, '00110010'), (8365, '00110011'), (8114, '00110100'), (7685, '00110101'), (7245, '00110110'), (6907, '00110111'), (6633, '00111000'), (6609, '00111001'), (6508, '00111010'), (6302, '00111011'), (6383, '00111100'), (6315, '00111101'), (5977, '00111110'), (6138, '00111111'), (6109, '01000000'), (5997, '01000001'), (6025, '01000010'), (6062, '01000011'), (5857, '01000100'), (5747, '01000101'), (5646, '01000110'), (5654, '01000111'), (5632, '01001000'), (5823, '01001001'), (6004, '01001010'), (5954, '01001011'), (6192, '01001100'), (6089, '01001101'), (6246, '01001110'), (6222, '01001111'), (6165, '01010000'), (5786, '01010001'), (5867, '01010010'), (5632, '01010011'), (5422, '01010100'), (5182, '01010101'), (5118, '01010110'), (4979, '01010111'), (5019, '01011000'), (4872, '01011001'), (4917, '01011010'), (4814, '01011011'), (4624, '01011100'), (4618, '01011101'), (4438, '01011110'), (4278, '01011111'), (4095, '01100000'), (4115, '01100001'), (4194, '01100010'), (4104, '01100011'), (4119, '01100100'), (4075, '01100101'), (4106, '01100110'), (3943, '01100111'), (3841, '01101000'), (3824, '01101001'), (3647, '01101010'), (3646, '01101011'), (3614, '01101100'), (3530, '01101101'), (3553, '01101110'), (3468, '01101111'), (3491, '01110000'), (3466, '01110001'), (3498, '01110010'), (3242, '01110011'), (3387, '01110100'), (3299, '01110101'), (3122, '01110110'), (3083, '01110111'), (3067, '01111000'), (2966, '01111001'), (2896, '01111010'), (2765, '01111011'), (2777, '01111100'), (2623, '01111101'), (2528, '01111110'), (2463, '01111111'), (2493, '10000000'), (2549, '10000001'), (2599, '10000010'), (2607, '10000011'), (2585, '10000100'), (2627, '10000101'), (2548, '10000110'), (2537, '10000111'), (2606, '10001000'), (2564, '10001001'), (2628, '10001010'), (2733, '10001011'), (2591, '10001100'), (2627, '10001101'), (2649, '10001110'), (2677, '10001111'), (2746, '10010000'), (2709, '10010001'), (2763, '10010010'), (2814, '10010011'), (2939, '10010100'), (2918, '10010101'), (2873, '10010110'), (2952, '10010111'), (3032, '10011000'), (2876, '10011001'), (2907, '10011010'), (2950, '10011011'), (2967, '10011100'), (2846, '10011101'), (2929, '10011110'), (2937, '10011111'), (2923, '10100000'), (3133, '10100001'), (3087, '10100010'), (2998, '10100011'), (3121, '10100100'), (3175, '10100101'), (3074, '10100110'), (3092, '10100111'), (3081, '10101000'), (3065, '10101001'), (2966, '10101010'), (2906, '10101011'), (2804, '10101100'), (2782, '10101101'), (2740, '10101110'), (2719, '10101111'), (2654, '10110000'), (2573, '10110001'), (2486, '10110010'), (2401, '10110011'), (2429, '10110100'), (2280, '10110101'), (2285, '10110110'), (2306, '10110111'), (2334, '10111000'), (2218, '10111001'), (2121, '10111010'), (2103, '10111011'), (1947, '10111100'), (1893, '10111101'), (1929, '10111110'), (1893, '10111111'), (1854, '11000000'), (1941, '11000001'), (1943, '11000010'), (2013, '11000011'), (2022, '11000100'), (2029, '11000101'), (2001, '11000110'), (1886, '11000111'), (1746, '11001000'), (1770, '11001001'), (1772, '11001010'), (1614, '11001011'), (1506, '11001100'), (1376, '11001101'), (1259, '11001110'), (1271, '11001111'), (1190, '11010000'), (1128, '11010001'), (1034, '11010010'), (999, '11010011'), (943, '11010100'), (965, '11010101'), (892, '11010110'), (896, '11010111'), (867, '11011000'), (824, '11011001'), (855, '11011010'), (815, '11011011'), (803, '11011100'), (749, '11011101'), (768, '11011110'), (809, '11011111'), (867, '11100000'), (791, '11100001'), (846, '11100010'), (831, '11100011'), (820, '11100100'), (799, '11100101'), (824, '11100110'), (841, '11100111'), (815, '11101000'), (827, '11101001'), (831, '11101010'), (843, '11101011'), (764, '11101100'), (747, '11101101'), (755, '11101110'), (656, '11101111'), (604, '11110000'), (587, '11110001'), (546, '11110010'), (500, '11110011'), (455, '11110100'), (416, '11110101'), (399, '11110110'), (370, '11110111'), (370, '11111000'), (340, '11111001'), (338, '11111010'), (336, '11111011'), (327, '11111100'), (296, '11111101'), (293, '11111110'), (438, '11111111')]
    print(type(freq))
    def encode(frequencies):
        p = queue.PriorityQueue()
        for item in frequencies:
            p.put(item)
        while (p.qsize() > 1):
            l, r = p.get(), p.get()
            node = HuffmanNode(l,r)
            p.put(( l[0]+r[0],node))
        return p.get()
    node = encode(freq)

#    menor_folha.pixel = np.where(histograma == histograma.min())[0][0]
        
        
img = cv.imread("lena.bmp")
huffman(img)
